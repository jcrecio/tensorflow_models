# -*- coding: utf-8 -*-
"""HouseLinearModel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zDlPk_bQpp1t8HTn6JRFYyXB8owkPGXv
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x # Load tensorflow 2.x into notebook

!pip install -q sklearn # install scikit-learn

"""We import all the libraries needed"""

# from __future__ import absolute_import, division, print_function, unicode_literals
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib

import tensorflow.compat.v2.feature_column as fc

import tensorflow as tf

"""LetÂ´s load the data from houses"""

dftrain = pd.read_csv('https://raw.githubusercontent.com/jcrecio/ml_housepricing/main/TrainData.csv') # train data frame
dftest = pd.read_csv('https://raw.githubusercontent.com/jcrecio/ml_housepricing/main/TestData.csv') # eval/test data frame

y_train = dftrain.pop('Price') # Get the price from train data
y_eval = dftest.pop('Price') # Get the price from test data

"""We can check the data shape and the labels"""

print(dftrain.head())

dftrain.describe()

dftrain.Size.hist(bins=100) # house sizes distribution

feature_columns = []
for feature_name in dftrain.keys():
	feature_columns.append(tf.feature_column.numeric_column(feature_name, dtype=tf.float32))
 
print(feature_columns)

"""Creates batches with the data and train for N epochs (we can shuffle or not)"""

def make_input_fn(data_df, label_df, num_epochs=10, shuffle=True, batch_size=32):
  def input_function():
    ds = tf.data.Dataset.from_tensor_slices((dict(data_df), label_df))
    if shuffle:
      ds = ds.shuffle(1000)
    ds = ds.batch(batch_size).repeat(num_epochs)
    return ds
  return input_function

train_input_fn = make_input_fn(dftrain, y_train)
eval_input_fn = make_input_fn(dftest, y_eval, num_epochs=1, shuffle=False)

"""Now we create our model (Linear regression)"""

linear_est = tf.estimator.LinearRegressor(feature_columns=feature_columns)

"""We train our model with the train data"""

linear_est.train(train_input_fn)

"""And we evaluate the model with our evaluation/test data"""

result = linear_est.evaluate(eval_input_fn)

predictions = list(linear_est.predict(eval_input_fn))
print(y_eval[0])
print(predictions[0])